<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Henry&apos;s Portfolio</title>
    <description>M.S. in Robotics @ Northwestern University</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 17 Dec 2023 21:05:37 -0500</pubDate>
    <lastBuildDate>Sun, 17 Dec 2023 21:05:37 -0500</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>Polyglotbot: A 7 DoF Robot Arm that Writes Translated Text and Speech</title>
        <description>&lt;p&gt;ROS2, MoveIt 2, RViz&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;441&quot; src=&quot;https://www.youtube.com/embed/nJnL6ji5LQk?si=367q6W7z9r8T-e2h&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Develop a ROS2 package that uses a 7 DoF Framka Emika Panda robotic arm to write translated text and speech on a whiteboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&quot;https://github.com/ME495-EmbeddedSystems/final-project-dkoh555&quot;&gt;https://github.com/ME495-EmbeddedSystems/final-project-dkoh555&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teammates&lt;/strong&gt;: Allen Liu, Kassidy Shedd, Megan Black, Damien Koh&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Calibrate&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The robot uses an Intel Realsense camera to acquire the location of three AprilTags, which, together, are used to constrain the plane of the whiteboard.&lt;/li&gt;
      &lt;li&gt;The distance and orientation of the whiteboard is made public through a custom message type on a ROS2 topic.&lt;/li&gt;
      &lt;li&gt;Using the known transformation between the camera link and the robot arm’s base link, the updated configuration (Pose) of the whiteboard is extrapolated into the frame of reference of the end-effector and is used to position the pen when writing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Detect Text&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;By default, the robot then enters the “Detecting” state, in which it waits for a human to enter the frame and start writing on the whiteboard.&lt;/li&gt;
      &lt;li&gt;Using the YOLOv8 deep learning model, the robot recognizes once a human has entered the frame and then left, after which the next step commences.&lt;/li&gt;
      &lt;li&gt;The robot then uses the PaddleOCR library to detect the text written on the whiteboard and pass it along, without any processing, as a string. The desired language is written on the whiteboard as a short language code above the unknown word(s) (e.g. “en” for English).&lt;/li&gt;
      &lt;li&gt;Alternatively, instead of writing a word on the whiteboard, the user could call the &lt;em&gt;speech&lt;/em&gt; service which activates the microphone as an input. The user then simply speaks out loud, and their word(s) are passed along as a string from there. By default, the desired language for speech is set to English.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Translate Text&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The next stage in the pipeline is the &lt;em&gt;translator&lt;/em&gt; node which takes in both the desired language and the string of the unknown word(s).&lt;/li&gt;
      &lt;li&gt;The translation node uses the Google Translate API and can translate to and from 50+ languages.&lt;/li&gt;
      &lt;li&gt;This step outputs a fully-translated string of text.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Text to Waypoints&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The &lt;em&gt;string2waypoints&lt;/em&gt; node uses matplotlib to convert each character to a series of waypoints–passed along as a series of &lt;em&gt;Point&lt;/em&gt; messages–which can then be followed by the robot arm.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Waypoints to Movement&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Finally, the robot uses the &lt;em&gt;write_letters&lt;/em&gt; package to convert the waypoints to movement and draw the letters on the board.&lt;/li&gt;
      &lt;li&gt;This package makes use of our custom &lt;em&gt;move_robot&lt;/em&gt; Python wrapper to plan and execute robot robot arm paths using the MoveIt 2 MoveGroup and ExecuteTrajectory Action Clients, respectively.&lt;/li&gt;
      &lt;li&gt;We make use of MoveIt 2’s &lt;em&gt;compute_cartesian_path&lt;/em&gt; service so as to follow a more direct and stable path when writing the letters, as opposed to &lt;em&gt;compute_ik&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My primary responsibilities included creating the &lt;em&gt;apriltags&lt;/em&gt; package, setting up TF tree and visualizing the transformations in RViz, creating the &lt;em&gt;speech&lt;/em&gt; package, and working with MoveIt 2 to help convert the waypoints to movement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/the_robot_is_cool.jpeg&quot; alt=&quot;The Robot Is Cool&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Dec 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/polyglotbot/</link>
        <guid isPermaLink="true">http://localhost:4000/polyglotbot/</guid>
        
        
        <category>ROS2</category>
        
        <category>MoveIt 2</category>
        
        <category>RViz</category>
        
      </item>
    
      <item>
        <title>KUKA youBot Mobile Manipulation</title>
        <description>&lt;p&gt;Robotic Manipulation, Python, CoppeliaSim&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;441&quot; src=&quot;https://www.youtube.com/embed/ZHFO4J9itbI?si=82YA8ILq-O1_tx1X&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Write a program that automatically plans a trajectory for a KUKA youBot mobile manipulator as it moves to, grasps, and places a block in a desired location.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&quot;https://github.com/henryburon/mobile-manipulation&quot;&gt;https://github.com/henryburon/mobile-manipulation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I wrote three functions to complete this project, which, when combined, generate the final trajectory:
    &lt;ul&gt;
      &lt;li&gt;TrajectoryGenerator&lt;/li&gt;
      &lt;li&gt;FeedbackControl&lt;/li&gt;
      &lt;li&gt;NextState&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TrajectoryGenerator&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Generates the reference trajectory for the end-effector frame {e}.&lt;/li&gt;
      &lt;li&gt;Consists of eight concatenated trajectory segments:
        &lt;ul&gt;
          &lt;li&gt;A trajectory to move the gripper from its initial configuration to a “standoff” configuration a few cm above the block.&lt;/li&gt;
          &lt;li&gt;A trajectory to move the gripper down to the grasp position&lt;/li&gt;
          &lt;li&gt;Closing of the gripper.&lt;/li&gt;
          &lt;li&gt;A trajectory to move the gripper back up to the “standoff” configuration.&lt;/li&gt;
          &lt;li&gt;A trajectory to move the gripper to a “standoff” configuration above the final configuration.&lt;/li&gt;
          &lt;li&gt;A trajectory to move the gripper to the final configuration of the object.&lt;/li&gt;
          &lt;li&gt;Opening of the gripper.&lt;/li&gt;
          &lt;li&gt;A trajectory to move the gripper back to the “standoff” configuration.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: A representation of the N configurations of the end-effector along the entire eight-segment reference trajectory.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FeedbackControl&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Calculates the kinematic task-space feedforward plus feedback control law.
 &lt;img src=&quot;/assets/images/feedback_control.png&quot; alt=&quot;Feedback Control&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: The commanded end-effector twist V expressed in the end-effector frame {e}.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NextState&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Calculates the robot’s configuration at the next time-step using first-order Euler-step.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: A 12-vector representing the configuration of the robot time Δt later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Combine Functions&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Finally, I integrated these three functions, provided the necessary initial and desired final configurations, and generated a .csv file to simulate the KUKA youBot’s movement in CoppeliaSim.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Results&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I finished by generating three trajectories:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Best&lt;/strong&gt;: A well-tuned feedforward-plus-PI controller. Error quickly converged to zero. First clip in the YouTube video.
  &lt;img src=&quot;/assets/images/best_run.png&quot; alt=&quot;Best Run&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Overshoot&lt;/strong&gt;: A less-well-tuned feedforward-plus-PI controller. Error takes longer to converge to zero.
  &lt;img src=&quot;/assets/images/overshoot_run.png&quot; alt=&quot;Overshoot Run&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;newTask&lt;/strong&gt;: Different initial and final configurations of the block. Second clip in the YouTube video.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 04 Dec 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/mobile-manipulation/</link>
        <guid isPermaLink="true">http://localhost:4000/mobile-manipulation/</guid>
        
        
        <category>Robotic Manipulation</category>
        
        <category>Python</category>
        
        <category>CoppeliaSim</category>
        
      </item>
    
      <item>
        <title>Machine Learning Emotion Classification</title>
        <description>&lt;p&gt;Machine Learning, Image Processing, Feature Extraction&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;441&quot; src=&quot;https://www.youtube.com/embed/CJrl6uvsziY?si=CeYyhI1T_yrKK-e9&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Create a robust emotion classification pipeline by developing a machine learning algorithm capable of classifying facial images based on their depicted emotion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&quot;https://github.com/henryburon/ml-emotion-classification&quot;&gt;https://github.com/henryburon/ml-emotion-classification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Load, Process, and Store Images&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;I loaded several thousand 48x48 grayscale training and testing images from seven different emotion categories, converted them to numpy arrays, and normalized the pixel values.&lt;/li&gt;
      &lt;li&gt;Kaggle Dataset: &lt;a href=&quot;https://www.kaggle.com/datasets/ananthu017/emotion-detection-fer&quot;&gt;https://www.kaggle.com/datasets/ananthu017/emotion-detection-fer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apply Histogram of Oriented Gradients (HOG) Feature Extraction&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Facial images are heavily influenced by subtle changes in facial shape and the presence of edges (e.g. raised eyebrows, open mouth). HOG excels at capturing these features by computing the oriented gradients within localized regions of the image. In addition, HOG is known for its robustness in variations in lighting and contrast, which are common challenges in image processing. Finally, implementing HOG is relatively efficient compared to other sophisticated feature extraction methods, which was important in my project, considering the number of images I needed to process.
 &lt;img src=&quot;/assets/images/hog_image_example.png&quot; alt=&quot;HOG Image Example&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assign Labels to Data:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I assigned seven labels to the data, corresponding to seven different emotion classes:
 [0] angry, [1] happy, [2] neutral, [3] sad, [4] disgusted, [5] fearful, [6] surprised&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Train Model&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;I trained the linear regression model, made predictions, obtained the classification report, and saved the trained model for further use, achieving an accuracy of up to 77%.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improving Model Accuracy&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;I took several steps to increase the accuracy of the model by improving the feature extraction process. For example, through experimentation, I optimized the number of orientations, block size, and cell size, all with the goal of enhancing the granularity and thereby descriptive power of the extracted features. I also investigated different normalization techniques, such as min-max scaling, although this did not discernably affect the results.&lt;/li&gt;
      &lt;li&gt;Looking ahead, instead of engineering the features myself (i.e. HOG), I intend to try more feature learning techniques–automatic feature engineering–as this would empower the machine to autonomously learn more effective representations from the raw data.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 25 Nov 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/ml_emotion_classification/</link>
        <guid isPermaLink="true">http://localhost:4000/ml_emotion_classification/</guid>
        
        
        <category>Machine Learning</category>
        
        <category>Python</category>
        
        <category>Image Processing</category>
        
      </item>
    
      <item>
        <title>Computer Vision-Controlled Robot Arm</title>
        <description>&lt;p&gt;OpenCV, Python, PincherX 100&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;441&quot; src=&quot;https://www.youtube.com/embed/pturk2xscaA?si=CLWhMrOFVhrZ33sk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Use the PincherX 100 robot arm to autonomously grab a purple pen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&quot;https://github.com/henryburon/pen-thief&quot;&gt;https://github.com/henryburon/pen-thief&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Detect Location of the Purple Pen&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;First, I used the RGB image from an Intel RealSense camera to create an HSV mask that filtered out every color except purple.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Identify Contour and Calculate Centroid&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I added contours around the selected pixels and found the 2D coordinate of the centroid of the largest contour, which I assumed to be the pen.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Align the Images&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I then aligned the camera’s Depth Map with the RGB Image and found the pen’s 3D coordinates in the camera’s reference frame.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transform to Robot Frame&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I converted these coordinates to be in the robot arm’s frame, given its 90° rotation and fixed offset.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Command the End-Effector&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Finally, I used the InterbotixManipulatorXS Python package to move the end-effector and gripper to the desired coordinate and position.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 15 Oct 2023 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/pen_thief/</link>
        <guid isPermaLink="true">http://localhost:4000/pen_thief/</guid>
        
        
        <category>OpenCV</category>
        
        <category>Python</category>
        
        <category>PincherX 100</category>
        
      </item>
    
      <item>
        <title>Unmanned Electric Race Boat</title>
        <description>&lt;p&gt;ArduPilot, Electronics, Autonomous Systems&lt;/p&gt;

&lt;iframe src=&quot;https://www.facebook.com/plugins/video.php?height=314&amp;amp;href=https%3A%2F%2Fwww.facebook.com%2Fnavalengineers%2Fvideos%2F256584973783468%2F&amp;amp;show_text=false&amp;amp;width=560&amp;amp;t=0&quot; width=&quot;100%&quot; height=&quot;460&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Video provided by the American Society of Naval Engineers.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;For my undergraduate Capstone project at William &amp;amp; Mary, I lead a team in building a boat from scratch to compete in &lt;strong&gt;Unmanned Division&lt;/strong&gt; of the 2023 Promoting Electric Propulsion for Small Craft (PEP) competition, a 5-mile endurance race. Our fully electric boat placed &lt;strong&gt;3rd&lt;/strong&gt; against universities from across the country.&lt;/p&gt;

&lt;p&gt;Our catamaran-style differential-drive boat, fondly named the &lt;em&gt;Colonial Cruiser&lt;/em&gt;, ran ArduPilot Rover on a Pixhawk Cube Orange and was controlled via radio during the competition, though was capable of autonomous navigation during controlled tests.&lt;/p&gt;

&lt;p&gt;As the Team and Electrical Lead, I focused on the autonomous navigation and electric propulsion systems of the boat, though I had a hand in everything from hull design to the power distribution systems as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teammates&lt;/strong&gt;: Owen Darcy, Ethan Chang, Shamsullah Ahmadzai&lt;br /&gt;
&lt;strong&gt;Advisor&lt;/strong&gt;: Jonathan Frey&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ardupilot.jpg&quot; alt=&quot;ArduPilot&quot; /&gt;
ArduPilot Ground Station setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/final_touches.jpg&quot; alt=&quot;Final Touches&quot; /&gt;
Final touches before the competition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lake_test.jpg&quot; alt=&quot;Lake Test&quot; /&gt;
Testing on the lake.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Jun 2023 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/unmanned_electric_boat/</link>
        <guid isPermaLink="true">http://localhost:4000/unmanned_electric_boat/</guid>
        
        
        <category>ArduPilot</category>
        
        <category>Electronics</category>
        
        <category>Autonomous Systems</category>
        
      </item>
    
  </channel>
</rss>
